package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Book;

public class BookDAOImpl implements BookDAO {
    private static final String DB_PATH = "path_to_your_Books.db";

    private Connection getConnection() throws SQLException {
        String path = this.getClass().getClassLoader().getResource("Books.db").getPath();
        return DriverManager.getConnection("jdbc:sqlite:" + path);
    }

    @Override
    public List<Book> searchAll() throws SQLException {
        List<Book> books = new ArrayList<>();
        String sql = "SELECT * FROM BOOK";

        try (Connection con = getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                books.add(new Book(rs.getInt("id"), rs.getString("title"), rs.getString("author"), rs.getDouble("price")));
            }
        }
        return books;
    }

    @Override
    public List<Book> searchByCategory(String category) throws SQLException {
        List<Book> books = new ArrayList<>();
        String sql = "SELECT B.id, B.title, B.author, B.price FROM BOOK B " +
                     "JOIN CATEGORY C ON B.category_id = C.id WHERE C.name = ?";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, category);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    books.add(new Book(rs.getInt("id"), rs.getString("title"), rs.getString("author"), rs.getDouble("price")));
                }
            }
        }
        return books;
    }

    @Override
    public List<Book> searchByKeyword(String keyword) throws SQLException {
        List<Book> books = new ArrayList<>();
        String sql = "SELECT * FROM BOOK WHERE title LIKE ? OR author LIKE ?";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            String searchKeyword = "%" + keyword + "%";
            pstmt.setString(1, searchKeyword);
            pstmt.setString(2, searchKeyword);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    books.add(new Book(rs.getInt("id"), rs.getString("title"), rs.getString("author"), rs.getDouble("price")));
                }
            }
        }
        return books;
    }
}
